import streamlit as st
import pandas as pd
import json
from io import BytesIO
from datetime import datetime
from openpyxl import Workbook
import os
import streamlit as st
from github import Github
from dotenv import load_dotenv

# Adiciona uma imagem no header usando HTML
st.markdown(
    """
    <style>
        .header-container {
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 100px;
            background: linear-gradient(135deg, #00009a, #b4df37);
           
        }
        .header-container img {
            max-width: 2000px; /* Tamanho da imagem */
            margin-right: 10px; /* Espa√ßamento ao lado da imagem */
            opacity: 0.6;
        }
        .header-container h1 {
            color: white; /* Cor do texto */
            font-size: 30px;
        }
    </style>
    <div class="header-container">
        <img src="https://raw.githubusercontent.com/Scsant/bracc2/3361f72d7f1b83260bd325f41387d614f7b49ffd/bracell.jpg" alt="Logo">
        
    </div>
    """,
    unsafe_allow_html=True
)


# CSS para alterar a cor do st.success
st.markdown(
    """
    <style>
    .stAlert {
        background: linear-gradient(135deg, #ffffff, #00009a);
        color: white; /* Cor do texto */
        border: 1px solid #f0f0d8; /* Cor da borda */
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# Estilo para aplicar o gradiente
page_style = """
<style>
    /* Gradiente para o fundo */
    .stApp {
        background: linear-gradient(185deg, #00009a, #b4df37);
        color: black;
    }

</style>
"""

st.markdown(page_style, unsafe_allow_html=True)




# Carrega as vari√°veis do .env
load_dotenv()


# Caminho dos arquivos JSON


EPIS_FILE = "epis.json"



# Configura√ß√µes do GitHub
GITHUB_TOKEN2 = os.getenv("GITHUB_TOKEN2")  # Configure como vari√°vel de ambiente para seguran√ßa
REPO_NAME = "Scsant/epiPython"
USUARIOS_FILE = "motorista.json"

def salvar_motoristas_no_github(conteudo_json):
    """Salva o arquivo motorista.json no GitHub."""
    g = Github(GITHUB_TOKEN2)  # Autentica usando o segundo token
    try:
        repo = g.get_repo(REPO_NAME)  # Obt√©m o reposit√≥rio
        try:
            # Verifica se o arquivo j√° existe no reposit√≥rio
            arquivo = repo.get_contents(USUARIOS_FILE)
            # Atualiza o arquivo existente
            repo.update_file(
                path=USUARIOS_FILE,
                message="Atualizando motorista.json",
                content=conteudo_json,
                sha=arquivo.sha,
            )
            print("motorista.json atualizado no GitHub com sucesso!")
        except Exception:
            # Se o arquivo n√£o existir, cria um novo
            repo.create_file(
                path=USUARIOS_FILE,
                message="Criando motorista.json",
                content=conteudo_json,
            )
            print("motorista.json criado no GitHub com sucesso!")
    except Exception as e:
        print(f"Erro ao salvar motorista.json no GitHub: {e}")



# Configura√ß√µes do GitHub
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")  # Configure como vari√°vel de ambiente para seguran√ßa
REPO_NAME = "Scsant/epiPython"
SOLICITACOES_FILE = "solicitacoes.json"

def salvar_no_github(conteudo_json):
    """Salva o arquivo no GitHub."""
    g = Github(GITHUB_TOKEN)
    try:
        repo = g.get_repo(REPO_NAME)
        try:
            # Verifica se o arquivo j√° existe no reposit√≥rio
            arquivo = repo.get_contents(SOLICITACOES_FILE)
            # Atualiza o arquivo existente
            repo.update_file(
                path=SOLICITACOES_FILE,
                message="Atualizando solicitacoes.json",
                content=conteudo_json,
                sha=arquivo.sha,
            )
            st.success("Arquivo atualizado no GitHub com sucesso!")
        except Exception:
            # Se o arquivo n√£o existir, cria um novo
            repo.create_file(
                path=SOLICITACOES_FILE,
                message="Criando solicitacoes.json",
                content=conteudo_json,
            )
            st.success("Arquivo criado no GitHub com sucesso!")
    except Exception as e:
        st.error(f"Erro ao salvar no GitHub: {e}")
        
def limpar_solicitacoes_do_github():
    """Limpa o conte√∫do do arquivo solicitacoes.json no GitHub sem delet√°-lo."""
    g = Github(GITHUB_TOKEN)
    try:
        repo = g.get_repo(REPO_NAME)
        arquivo = repo.get_contents(SOLICITACOES_FILE)

        # Novo conte√∫do do arquivo (JSON vazio)
        novo_conteudo = "{}"  # Para JSON vazio

        # Atualizar o arquivo no GitHub com conte√∫do vazio
        repo.update_file(
            path=SOLICITACOES_FILE,
            message="Limpando conte√∫do do solicitacoes.json",
            content=novo_conteudo,
            sha=arquivo.sha,
        )
        st.success("Conte√∫do de solicitacoes.json foi limpo com sucesso no GitHub!")
    except Exception as e:
        st.error(f"Erro ao limpar solicitacoes.json no GitHub: {e}")
  


def carregar_json(filepath):
    if os.path.exists(filepath):
        with open(filepath, "r", encoding="utf-8") as file:
            return json.load(file)
    return []



def salvar_json(filepath, data):
    """Salva o arquivo localmente e no GitHub, garantindo que os dados corretos sejam gravados."""

    if filepath not in [SOLICITACOES_FILE, USUARIOS_FILE]:  # Evita salvar em arquivos errados
        st.error(f"Tentativa de salvar em arquivo desconhecido: {filepath}")
        return False

    try:
        with open(filepath, "r", encoding="utf-8") as file:
            dados_existentes = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        dados_existentes = []

    dados_unicos = {json.dumps(item, sort_keys=True) for item in dados_existentes}
    novos_dados = []

    for item in data:
        item_str = json.dumps(item, sort_keys=True)
        if item_str not in dados_unicos:
            dados_unicos.add(item_str)
            novos_dados.append(item)

    if novos_dados:
        dados_existentes.extend(novos_dados)

        with open(filepath, "w", encoding="utf-8") as file:
            json.dump(dados_existentes, file, indent=4, ensure_ascii=False)

        # üîπ Escolhe a fun√ß√£o correta para salvar no GitHub
        if filepath == SOLICITACOES_FILE:
            salvar_no_github(json.dumps(dados_existentes, ensure_ascii=False, indent=4))
        elif filepath == USUARIOS_FILE:
            salvar_motoristas_no_github(json.dumps(dados_existentes, ensure_ascii=False, indent=4))

        return True  # Sucesso ao salvar
    return False  # Nenhuma mudan√ßa realizada




# Carregar usu√°rios, solicita√ß√µes e EPIs
usuarios = carregar_json(USUARIOS_FILE)
solicitacoes = carregar_json(SOLICITACOES_FILE)
epis = carregar_json(EPIS_FILE)

# Tokens para usu√°rios e EPIs
st.session_state.setdefault("solicitacoes_temp", [])

# Fun√ß√£o para buscar motoristas e t√©cnicos por matr√≠cula
def buscar_usuario_por_matricula(matricula):
    try:
        matricula = float(matricula)  # Converte a entrada para float
        for usuario in usuarios:
            if usuario["Matr√≠cula"] == matricula:
                return usuario
    except ValueError:
        st.warning("Matr√≠cula inv√°lida. Por favor, insira apenas n√∫meros.")
    return None

def verificar_duplicidade(lista, novo_item):
    """Verifica duplicidade de item em uma lista."""
    for item in lista:
        if (
            item["Matr√≠cula"] == novo_item["Matr√≠cula"] and
            item["Descri√ß√£o"] == novo_item["Descri√ß√£o"] and
            item["Tipo"] == novo_item["Tipo"]
        ):
            return item
    return None



# Fun√ß√£o para obter tipos de EPIs

def obter_tipos_epis():
    return list(set([epi["TIPO"] for epi in epis]))

def obter_epis_por_tipo(tipo):
    return [epi for epi in epis if epi["TIPO"] == tipo]

# √Årea de solicita√ß√£o de EPIs
menu = st.sidebar.selectbox("Selecione a √°rea", ["Solicita√ß√£o de EPIs", "√Årea Restrita - Supervisor"])

if menu == "Solicita√ß√£o de EPIs":
    st.title("Solicita√ß√£o de EPIs/Log√≠stica Florestal")

    matricula = st.text_input("Digite sua matr√≠cula")
    usuario = buscar_usuario_por_matricula(matricula) if matricula else None

    if usuario:
        st.success(f"Bem-vindo, {usuario['Nome']} ({usuario['Fun√ß√£o']})")

        # Solicita√ß√£o de EPIs
        st.header("Selecione os EPIs necess√°rios")

        tipo_epi = st.selectbox("Tipo de EPI", ["Selecione"] + obter_tipos_epis())
        if tipo_epi != "Selecione":
            epis_disponiveis = obter_epis_por_tipo(tipo_epi)
            descricao_epi = st.selectbox("Descri√ß√£o do EPI", ["Selecione"] + [epi["DESCRI√á√ÉO"] for epi in epis_disponiveis])

            if descricao_epi != "Selecione":
                epi_selecionado = next(epi for epi in epis_disponiveis if epi["DESCRI√á√ÉO"] == descricao_epi)
                quantidade_permitida = epi_selecionado["quantidades permitidas"]

                if usuario["Fun√ß√£o"] == "T√©cnico":
                    quantidade = st.number_input("Quantidade", min_value=1, step=1)
                else:
                    quantidade = st.number_input(
                        "Quantidade",
                        min_value=1,
                        max_value=quantidade_permitida,
                        step=1,
                    )

                if st.button("Adicionar ao Resumo"):
                    encontrado = False
                    for solicitacao in st.session_state["solicitacoes_temp"]:
                        if solicitacao["Matr√≠cula"] == matricula:
                            # Verificar se o item exato j√° foi adicionado
                            descricoes_existentes = solicitacao["Descri√ß√£o"].split(", ")
                            quantidades_existentes = solicitacao["Quantidade"].split(", ")
                            if descricao_epi in descricoes_existentes and str(quantidade) in quantidades_existentes:
                                st.warning("Este item j√° foi adicionado exatamente. Solicita√ß√£o recusada!")
                                encontrado = True
                                break

                            # Atualizar a linha existente (concatenar)
                            solicitacao["Descri√ß√£o"] += f", {descricao_epi}"
                            solicitacao["Tipo"] += f", {tipo_epi}"
                            solicitacao["Quantidade"] += f", {quantidade}"
                            solicitacao["C√≥digo SAP"] += f", {epi_selecionado['COD SAP']}"
                            encontrado = True
                            break

                    if not encontrado:
                        # Adicionar nova linha se n√£o encontrado
                        st.session_state["solicitacoes_temp"].append(
                            {
                                "Nome": usuario["Nome"],
                                "Equipe (BTF)": usuario.get("Equipe", "N/A"),
                                "Fun√ß√£o": usuario["Fun√ß√£o"],
                                "Frota": usuario.get("Frota", "N/A"),
                                "Matr√≠cula": matricula,
                                "Tipo": tipo_epi,
                                "Descri√ß√£o": descricao_epi,
                                "Quantidade": str(quantidade),
                                "C√≥digo SAP": str(epi_selecionado["COD SAP"]),
                            }
                        )
                    st.success(f"{descricao_epi} adicionado com sucesso!")

        # Resumo de solicita√ß√µes tempor√°rias
        if st.session_state["solicitacoes_temp"]:
            st.subheader("Resumo das Solicita√ß√µes")
            df_temp = pd.DataFrame(st.session_state["solicitacoes_temp"])
            st.dataframe(df_temp)

        if st.button("Enviar Solicita√ß√µes"):
            novas_solicitacoes = st.session_state["solicitacoes_temp"]

            # Verifica se h√° novas solicita√ß√µes antes de salvar
            if not novas_solicitacoes:
                st.warning("‚ö†Ô∏è Nenhuma nova solicita√ß√£o foi adicionada.")
            else:
                solicitacoes.extend(novas_solicitacoes)

                # Chama a fun√ß√£o e verifica se algo foi salvo
                resultado = salvar_json(SOLICITACOES_FILE, solicitacoes)  # Agora salva localmente e no GitHub

                if resultado:  # Se algo foi salvo, exibe sucesso
                    st.success("‚úÖ Solicita√ß√µes enviadas para an√°lise do supervisor!")
                    st.session_state["solicitacoes_temp"] = []  # Limpa as solicita√ß√µes tempor√°rias
                else:
                    st.warning("‚ö†Ô∏è As solicita√ß√µes j√° existiam e n√£o foram enviadas novamente.")



# √Årea Restrita para Supervisores
elif menu == "√Årea Restrita - Supervisor":
    st.title("√Årea Restrita - Supervisor")
    senha = st.text_input("Digite a senha", type="password")

    if senha == "admin123":
        st.success("Acesso autorizado")

        if solicitacoes:
            st.subheader("Solicita√ß√µes Pendentes para Aprova√ß√£o")

            # Criar DataFrame
            df_pendentes = pd.DataFrame(solicitacoes)

            # Adiciona um checkbox para selecionar todas as solicita√ß√µes
            selecionar_todos = st.checkbox("Selecionar todas as solicita√ß√µes")

            # Adiciona um selectbox para sele√ß√£o individual, com op√ß√£o de selecionar todas
            selecionados = st.multiselect(
                "Selecione as solicita√ß√µes a excluir:", 
                df_pendentes.index.tolist(),  # √çndices das linhas
                default=df_pendentes.index.tolist() if selecionar_todos else []  # Marca todos se checkbox ativado
            )

            # Exibi√ß√£o padr√£o da tabela com redimensionamento
            st.dataframe(df_pendentes, use_container_width=True)

            # Se houver solicita√ß√µes selecionadas e o bot√£o for pressionado, remove apenas as escolhidas
            if st.button("Excluir Selecionados") and selecionados:
                df_pendentes.drop(index=selecionados, inplace=True)  # Remove apenas os itens selecionados
                solicitacoes = df_pendentes.to_dict(orient="records")  # Atualiza a lista JSON

                # Salva a vers√£o atualizada localmente
                salvar_json(SOLICITACOES_FILE, solicitacoes)  

                # Atualiza no GitHub com o novo conte√∫do
                salvar_no_github(json.dumps(solicitacoes, ensure_ascii=False, indent=4)) 

                st.success(f"‚úÖ {len(selecionados)} solicita√ß√£o(√µes) exclu√≠da(s) com sucesso!")
                st.rerun()  # Atualiza a interface para refletir as mudan√ßas


                
                
            # Bot√£o para exportar para Excel
            def exportar_para_excel(dataframe):
                output = BytesIO()
                with pd.ExcelWriter(output, engine="openpyxl") as writer:
                    dataframe.to_excel(writer, index=False, sheet_name="SolicitacoesPendentes")
                return output.getvalue()

            if st.button("Exportar para Excel"):
                excel_data = exportar_para_excel(df_pendentes)
                st.download_button(
                    label="Baixar Excel",
                    data=excel_data,
                    file_name="solicitacoes_pendentes.xlsx",
                    mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                )

        # √Årea de cadastro de motoristas
        st.title("√Årea Restrita - Cadastro de Motoristas")

        # Formul√°rio para cadastrar motoristas
        nome = st.text_input("Nome do Motorista")
        matricula = st.text_input("Matr√≠cula")

        # Listas suspensas para Frota, Equipe e Fun√ß√£o
        frota = st.selectbox("Frota", ["Selecione", "Frota Leste", "Frota Oeste", "Troca de Turno"])
        equipe = st.selectbox("Equipe", ["Selecione", "BTF1", "BTF2", "BTF3", "BTF4", "BTF5", "BTF6", "BTF7", "BTF8", "Troca de Turno"])
        funcao = st.selectbox("Fun√ß√£o", ["Selecione", "T√©cnico", "Motorista"])

        if st.button("Cadastrar Motorista"):
            # Valida√ß√µes b√°sicas
            if not nome or not matricula or frota == "Selecione" or equipe == "Selecione" or funcao == "Selecione":
                st.error("Todos os campos s√£o obrigat√≥rios!")
            else:
                try:
                    # Criar dicion√°rio no padr√£o JSON
                    novo_motorista = {
                        "Frota": frota,
                        "Equipe": equipe,
                        "Matr√≠cula": float(matricula),  # Converte matr√≠cula para float
                        "Fun√ß√£o": funcao,
                        "Nome": nome,
                    }

                    # Carregar dados existentes e adicionar o novo motorista
                    motoristas = carregar_json(USUARIOS_FILE)
                    motoristas.append(novo_motorista)
                    salvar_json(USUARIOS_FILE, motoristas)

                    # Salvar motoristas no GitHub
                    salvar_motoristas_no_github(json.dumps(motoristas, ensure_ascii=False, indent=4))

                    st.success(f"Motorista {nome} cadastrado com sucesso!")
                except Exception as e:
                    st.error(f"Erro ao cadastrar motorista: {e}")

        # Bot√£o para deletar o arquivo de solicita√ß√µes no GitHub
        st.subheader("Limpar Base de Solicita√ß√µes")
        if st.button("Deletar Solicita√ß√µes da Base"):
            limpar_solicitacoes_do_github()

                            
